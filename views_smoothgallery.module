<?php

include_once('views_smoothgallery.features.inc');

/**
 * Implementation of hook_theme()
 */
function views_smoothgallery_theme() {
  return array(
    'smoothgallery_images' => array(
      'arguments' => array('view' => NULL, 'fields' => NULL, 'row' => NULL),
      'template' => 'smoothgallery_images',
    )
  );
}

/**
 * Implementation of phptemplate_views_view_fields__VIEWNAME()
 */
function phptemplate_views_view_fields__smoothgallery($view, $nodes, $type) {
  return theme('smoothgallery_images', $view, $nodes, $type, true);
}

/**
 * Implementation of phptemplate_views_view_unformatted__VIEWNAME()
 */
function phptemplate_views_view_unformatted__smoothgallery($view, $options, $rows, $title) {

  drupal_add_css(drupal_get_path('module', 'views_smoothgallery') .'/css/jd.gallery.css');
  drupal_add_css(drupal_get_path('module', 'views_smoothgallery') .'/smoothgallery.css');
  drupal_add_js(drupal_get_path('module', 'views_smoothgallery') .'/scripts/mootools.namespaced.js', 'module');
  drupal_add_js(drupal_get_path('module', 'views_smoothgallery') .'/scripts/jd.gallery.namespaced.js', 'module');
  drupal_add_js("
    function startGallery() {
      var myGallery = new gallery(Moo.$('smoothgallery'), {
        timed: true
      });
    }
    window.onDomReady(startGallery);", 
    'inline'
  );

  $output = '<div id="smoothgallery">';
  $output .= theme('views_view_unformatted', $view, $options, $rows, $title);
  $output .= '</div>';
  return $output;
} 

/**
 * Preprocess theme function to print a single record from a row, with fields
 */
function template_preprocess_smoothgallery_images(&$vars) {
  $view = $vars['view'];

  // Loop through the fields for this view.
  $inline = FALSE;
  $vars['fields'] = array(); // ensure it's at least an empty array.
  foreach ($view->field as $id => $field) {
    // render this even if set to exclude so it can be used elsewhere.
    $field_output = $view->style_plugin->get_field($view->row_index, $id);
    $empty = $field_output !== 0 && empty($field_output);
    if (empty($field->options['exclude']) && (!$empty || empty($field->options['hide_empty']))) {
      $object = new stdClass();

      $object->content = $field_output;
      if (isset($view->field[$id]->field_alias) && isset($vars['row']->{$view->field[$id]->field_alias})) {
        $object->raw = $vars['row']->{$view->field[$id]->field_alias};
      }
      else {
        $object->raw = NULL; // make sure it exists to reduce NOTICE
      }
      $object->inline = !empty($vars['options']['inline'][$id]);
      $object->inline_html = $object->inline ? 'span' : 'div';
      if (!empty($vars['options']['separator']) && $inline && $object->inline && $object->content) {
        $object->separator = filter_xss_admin($vars['options']['separator']);
      }

      $inline = $object->inline;

      $object->handler = &$view->field[$id];
      $object->element_type = $object->handler->element_type();

      $object->class = views_css_safe($id);
      $object->label = check_plain($view->field[$id]->label());
      $vars['fields'][$id] = $object;
    }
  }
}